var searchIndex = {};
searchIndex['alsa'] = {"items":[[0,"","alsa","This ALSA API wrapper/binding is WIP - the ALSA API is huge, and new\nfunctions and structs might be added as requested. Enjoy!",null,null],[3,"Error","","Most ALSA functions can return a negative error code.\nIf so, then that error code is wrapped into this `Error` struct.\nAn Error is also returned in case ALSA returns a string that\ncannot be translated into Rust's UTF-8 strings.",null,null],[3,"Output","","[snd_output_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___output.html) wrapper",null,null],[4,"Direction","","Replaces constants ending with PLAYBACK/CAPTURE as well as\nINPUT/OUTPUT ",null,null],[13,"Playback","","",0,null],[13,"Capture","","",0,null],[4,"ValueOr","","Used to restrict hw parameters. In case the submitted\nvalue is unavailable, in which direction should one search\nfor available values?",null,null],[13,"Less","","The value set is the submitted value, or less",1,null],[13,"Nearest","","The value set is the submitted value, or the nearest",1,null],[13,"Greater","","The value set is the submitted value, or greater",1,null],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",2,{"inputs":[{"name":"error"},{"name":"option"},{"name":"c_int"}],"output":{"name":"error"}}],[11,"code","","",2,{"inputs":[{"name":"error"}],"output":{"name":"c_int"}}],[11,"description","","",2,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"card","","Sound card enumeration",null,null],[3,"Card","alsa::card","An ALSA sound card, uniquely identified by its index.",null,null],[3,"Iter","","Iterate over existing sound cards.",null,null],[11,"new","","",3,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",3,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"new","","",4,{"inputs":[{"name":"card"},{"name":"c_int"}],"output":{"name":"card"}}],[11,"from_str","","",4,{"inputs":[{"name":"card"},{"name":"cstr"}],"output":{"name":"result"}}],[11,"get_name","","",4,{"inputs":[{"name":"card"}],"output":{"name":"result"}}],[11,"get_longname","","",4,{"inputs":[{"name":"card"}],"output":{"name":"result"}}],[11,"get_index","","",4,{"inputs":[{"name":"card"}],"output":{"name":"c_int"}}],[0,"ctl","alsa","Control device API",null,null],[3,"Ctl","alsa::ctl","[snd_ctl_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) wrapper",null,null],[3,"CardInfo","","[snd_ctl_card_info_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) wrapper",null,null],[3,"ElemId","","[snd_ctl_elem_id_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) wrapper",null,null],[3,"ElemValue","","[snd_ctl_elem_value_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) wrapper",null,null],[3,"ElemInfo","","[snd_ctl_elem_info_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) wrapper",null,null],[4,"ElemIface","","[SND_CTL_ELEM_IFACE_xxx](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) constants",null,null],[13,"Card","","",5,null],[13,"Hwdep","","",5,null],[13,"Mixer","","",5,null],[13,"PCM","","",5,null],[13,"Rawmidi","","",5,null],[13,"Timer","","",5,null],[13,"Sequencer","","",5,null],[4,"ElemType","","[SND_CTL_ELEM_TYPE_xxx](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) constants",null,null],[13,"None","","",6,null],[13,"Boolean","","",6,null],[13,"Integer","","",6,null],[13,"Enumerated","","",6,null],[13,"Bytes","","",6,null],[13,"IEC958","","",6,null],[13,"Integer64","","",6,null],[0,"hctl","alsa","HCtl API - for mixer control and jack detection",null,null],[3,"HCtl","alsa::hctl","[snd_hctl_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___h_control.html) wrapper",null,null],[3,"ElemIter","","Iterates over elements for a `HCtl`",null,null],[3,"Elem","","[snd_hctl_elem_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___h_control.html) wrapper",null,null],[11,"drop","","",7,{"inputs":[{"name":"hctl"}],"output":null}],[11,"open","","Open does not support async mode (it's not very Rustic anyway)\nNote: You probably want to call `load` afterwards.",7,{"inputs":[{"name":"hctl"},{"name":"cstr"},{"name":"bool"}],"output":{"name":"result"}}],[11,"load","","",7,{"inputs":[{"name":"hctl"}],"output":{"name":"result"}}],[11,"elem_iter","","",7,{"inputs":[{"name":"hctl"}],"output":{"name":"elemiter"}}],[11,"count","","",7,{"inputs":[{"name":"hctl"}],"output":{"name":"usize"}}],[11,"fill","","",7,null],[11,"revents","","",7,null],[11,"next","","",8,{"inputs":[{"name":"elemiter"}],"output":{"name":"option"}}],[11,"get_id","","",9,{"inputs":[{"name":"elem"}],"output":{"name":"result"}}],[11,"info","","",9,{"inputs":[{"name":"elem"}],"output":{"name":"result"}}],[11,"read","","",9,{"inputs":[{"name":"elem"}],"output":{"name":"result"}}],[11,"write","","",9,{"inputs":[{"name":"elem"},{"name":"elemvalue"}],"output":{"name":"result"}}],[0,"pcm","alsa","Audio playback and capture",null,null],[3,"PCM","alsa::pcm","[snd_pcm_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m.html) wrapper - start here for audio playback and recording",null,null],[3,"IO","","Sample format dependent struct for reading from and writing data to a `PCM`.\nAlso implements `std::io::Read` and `std::io::Write`.",null,null],[3,"HwParams","","[snd_pcm_hw_params_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m___h_w___params.html) wrapper",null,null],[3,"SwParams","","[snd_pcm_sw_params_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m___s_w___params.html) wrapper",null,null],[3,"Status","","[snd_pcm_status_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m___status.html) wrapper",null,null],[4,"State","","[SND_PCM_STATE_xxx](http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m.html) constants",null,null],[13,"Open","","",10,null],[13,"Setup","","",10,null],[13,"Prepared","","",10,null],[13,"Running","","",10,null],[13,"XRun","","",10,null],[13,"Draining","","",10,null],[13,"Paused","","",10,null],[13,"Suspended","","",10,null],[13,"Disconnected","","",10,null],[4,"Format","","[SND_PCM_FORMAT_xxx](http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m.html) constants",null,null],[13,"Unknown","","",11,null],[13,"S8","","",11,null],[13,"U8","","",11,null],[13,"S16LE","","",11,null],[13,"S16BE","","",11,null],[13,"U16LE","","",11,null],[13,"U16BE","","",11,null],[13,"S32LE","","",11,null],[13,"S32BE","","",11,null],[13,"U32LE","","",11,null],[13,"U32BE","","",11,null],[13,"FloatLE","","",11,null],[13,"FloatBE","","",11,null],[13,"Float64LE","","",11,null],[13,"Float64BE","","",11,null],[4,"Access","","[SND_PCM_ACCESS_xxx](http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m.html) constants",null,null],[13,"MMapInterleaved","","",12,null],[13,"MMapNonInterleaved","","",12,null],[13,"MMapComplex","","",12,null],[13,"RWInterleaved","","",12,null],[13,"RWNonInterleaved","","",12,null],[6,"Frames","","[snd_pcm_sframes_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m.html)",null,null],[11,"open","","",13,{"inputs":[{"name":"pcm"},{"name":"cstr"},{"name":"direction"},{"name":"bool"}],"output":{"name":"result"}}],[11,"start","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"pause","","",13,{"inputs":[{"name":"pcm"},{"name":"bool"}],"output":{"name":"result"}}],[11,"resume","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"drain","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"prepare","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"reset","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"recover","","",13,{"inputs":[{"name":"pcm"},{"name":"c_int"},{"name":"bool"}],"output":{"name":"result"}}],[11,"wait","","",13,{"inputs":[{"name":"pcm"},{"name":"option"}],"output":{"name":"result"}}],[11,"state","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"state"}}],[11,"bytes_to_frames","","",13,{"inputs":[{"name":"pcm"},{"name":"isize"}],"output":{"name":"frames"}}],[11,"frames_to_bytes","","",13,{"inputs":[{"name":"pcm"},{"name":"frames"}],"output":{"name":"isize"}}],[11,"avail_update","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"avail","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"avail_delay","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"status","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io_i8","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io_u8","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io_i16","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io_u16","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io_i32","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io_u32","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io_f32","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io_f64","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"io","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"io"}}],[11,"hw_params","","Sets hw parameters. Note: No IO object can exist for this PCM\nwhen hw parameters are set.",13,{"inputs":[{"name":"pcm"},{"name":"hwparams"}],"output":{"name":"result"}}],[11,"hw_params_current","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"sw_params","","",13,{"inputs":[{"name":"pcm"},{"name":"swparams"}],"output":{"name":"result"}}],[11,"sw_params_current","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"result"}}],[11,"dump","","",13,{"inputs":[{"name":"pcm"},{"name":"output"}],"output":{"name":"result"}}],[11,"dump_hw_setup","","",13,{"inputs":[{"name":"pcm"},{"name":"output"}],"output":{"name":"result"}}],[11,"dump_sw_setup","","",13,{"inputs":[{"name":"pcm"},{"name":"output"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"pcm"}],"output":null}],[11,"count","","",13,{"inputs":[{"name":"pcm"}],"output":{"name":"usize"}}],[11,"fill","","",13,null],[11,"revents","","",13,null],[11,"drop","","",14,{"inputs":[{"name":"io"}],"output":null}],[11,"writei","","On success, returns number of *frames* written.\n(Multiply with number of channels to get number of items in buf successfully written.)",14,null],[11,"readi","","On success, returns number of *frames* read.\n(Multiply with number of channels to get number of items in buf successfully read.)",14,null],[11,"mmap","","Wrapper around snd_pcm_mmap_begin and snd_pcm_mmap_commit.",14,{"inputs":[{"name":"io"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read","","",14,null],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"io"}],"output":{"name":"result"}}],[11,"cmp","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",10,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",11,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"format"},{"name":"format"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"fmt","","",11,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"s16","","",11,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"u16","","",11,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"s32","","",11,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"u32","","",11,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"float","","",11,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"float64","","",11,{"inputs":[{"name":"format"}],"output":{"name":"format"}}],[11,"cmp","","",12,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"access"},{"name":"access"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"access"}],"output":{"name":"access"}}],[11,"fmt","","",12,{"inputs":[{"name":"access"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",15,{"inputs":[{"name":"hwparams"}],"output":null}],[11,"any","","",15,{"inputs":[{"name":"hwparams"},{"name":"pcm"}],"output":{"name":"result"}}],[11,"get_rate_resample","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"result"}}],[11,"set_rate_resample","","",15,{"inputs":[{"name":"hwparams"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_channels_near","","",15,{"inputs":[{"name":"hwparams"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_channels","","",15,{"inputs":[{"name":"hwparams"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_channels","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"result"}}],[11,"set_rate_near","","",15,{"inputs":[{"name":"hwparams"},{"name":"u32"},{"name":"valueor"}],"output":{"name":"result"}}],[11,"set_rate","","",15,{"inputs":[{"name":"hwparams"},{"name":"u32"},{"name":"valueor"}],"output":{"name":"result"}}],[11,"get_rate","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"result"}}],[11,"set_format","","",15,{"inputs":[{"name":"hwparams"},{"name":"format"}],"output":{"name":"result"}}],[11,"get_format","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"result"}}],[11,"set_access","","",15,{"inputs":[{"name":"hwparams"},{"name":"access"}],"output":{"name":"result"}}],[11,"get_access","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"result"}}],[11,"set_period_size_near","","",15,{"inputs":[{"name":"hwparams"},{"name":"frames"},{"name":"valueor"}],"output":{"name":"result"}}],[11,"set_period_size","","",15,{"inputs":[{"name":"hwparams"},{"name":"frames"},{"name":"valueor"}],"output":{"name":"result"}}],[11,"get_period_size","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"result"}}],[11,"set_periods","","",15,{"inputs":[{"name":"hwparams"},{"name":"u32"},{"name":"valueor"}],"output":{"name":"result"}}],[11,"get_periods","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"result"}}],[11,"set_buffer_size_near","","",15,{"inputs":[{"name":"hwparams"},{"name":"frames"}],"output":{"name":"result"}}],[11,"set_buffer_size","","",15,{"inputs":[{"name":"hwparams"},{"name":"frames"}],"output":{"name":"result"}}],[11,"get_buffer_size","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"result"}}],[11,"dump","","",15,{"inputs":[{"name":"hwparams"},{"name":"output"}],"output":{"name":"result"}}],[11,"copy_from","","",15,{"inputs":[{"name":"hwparams"},{"name":"hwparams"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"hwparams"}],"output":{"name":"hwparams"}}],[11,"fmt","","",15,{"inputs":[{"name":"hwparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",16,{"inputs":[{"name":"swparams"}],"output":null}],[11,"set_avail_min","","",16,{"inputs":[{"name":"swparams"},{"name":"frames"}],"output":{"name":"result"}}],[11,"get_avail_min","","",16,{"inputs":[{"name":"swparams"}],"output":{"name":"result"}}],[11,"set_start_threshold","","",16,{"inputs":[{"name":"swparams"},{"name":"frames"}],"output":{"name":"result"}}],[11,"get_start_threshold","","",16,{"inputs":[{"name":"swparams"}],"output":{"name":"result"}}],[11,"set_stop_threshold","","",16,{"inputs":[{"name":"swparams"},{"name":"frames"}],"output":{"name":"result"}}],[11,"get_stop_threshold","","",16,{"inputs":[{"name":"swparams"}],"output":{"name":"result"}}],[11,"set_tstamp_mode","","",16,{"inputs":[{"name":"swparams"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_tstamp_mode","","",16,{"inputs":[{"name":"swparams"}],"output":{"name":"result"}}],[11,"dump","","",16,{"inputs":[{"name":"swparams"},{"name":"output"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"swparams"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_htstamp","","",17,{"inputs":[{"name":"status"}],"output":{"name":"timespec"}}],[11,"get_trigger_htstamp","","",17,{"inputs":[{"name":"status"}],"output":{"name":"timespec"}}],[11,"get_audio_htstamp","","",17,{"inputs":[{"name":"status"}],"output":{"name":"timespec"}}],[11,"get_state","","",17,{"inputs":[{"name":"status"}],"output":{"name":"state"}}],[11,"get_avail","","",17,{"inputs":[{"name":"status"}],"output":{"name":"frames"}}],[11,"get_delay","","",17,{"inputs":[{"name":"status"}],"output":{"name":"frames"}}],[11,"get_avail_max","","",17,{"inputs":[{"name":"status"}],"output":{"name":"frames"}}],[11,"get_overrange","","",17,{"inputs":[{"name":"status"}],"output":{"name":"frames"}}],[11,"dump","","",17,{"inputs":[{"name":"status"},{"name":"output"}],"output":{"name":"result"}}],[0,"rawmidi","alsa","MIDI devices I/O and enumeration",null,null],[3,"Iter","alsa::rawmidi","Iterator over [Rawmidi](http://www.alsa-project.org/alsa-doc/alsa-lib/group___raw_midi.html) devices and subdevices",null,null],[3,"Info","","[snd_rawmidi_info_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___raw_midi.html) wrapper",null,null],[3,"Rawmidi","","[snd_rawmidi_t](http://www.alsa-project.org/alsa-doc/alsa-lib/group___raw_midi.html) wrapper",null,null],[3,"IO","","Implements `std::io::Read` and `std::io::Write` for `Rawmidi`",null,null],[11,"drop","","",18,{"inputs":[{"name":"info"}],"output":null}],[11,"get_device","","",18,{"inputs":[{"name":"info"}],"output":{"name":"i32"}}],[11,"get_subdevice","","",18,{"inputs":[{"name":"info"}],"output":{"name":"i32"}}],[11,"get_stream","","",18,{"inputs":[{"name":"info"}],"output":{"name":"direction"}}],[11,"get_subdevice_name","","",18,{"inputs":[{"name":"info"}],"output":{"name":"result"}}],[11,"get_id","","",18,{"inputs":[{"name":"info"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[{"name":"iter"},{"name":"ctl"}],"output":{"name":"iter"}}],[11,"next","","",19,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"drop","","",20,{"inputs":[{"name":"rawmidi"}],"output":null}],[11,"open","","",20,{"inputs":[{"name":"rawmidi"},{"name":"cstr"},{"name":"direction"},{"name":"bool"}],"output":{"name":"result"}}],[11,"info","","",20,{"inputs":[{"name":"rawmidi"}],"output":{"name":"result"}}],[11,"drop","","",20,{"inputs":[{"name":"rawmidi"}],"output":{"name":"result"}}],[11,"drain","","",20,{"inputs":[{"name":"rawmidi"}],"output":{"name":"result"}}],[11,"name","","",20,{"inputs":[{"name":"rawmidi"}],"output":{"name":"result"}}],[11,"io","","",20,{"inputs":[{"name":"rawmidi"}],"output":{"name":"io"}}],[11,"count","","",20,{"inputs":[{"name":"rawmidi"}],"output":{"name":"usize"}}],[11,"fill","","",20,null],[11,"revents","","",20,null],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"io"}],"output":{"name":"result"}}],[0,"device_name","alsa","Enumerate devices in the alsa library configuration",null,null],[3,"HintIter","alsa::device_name","[snd_device_name_hint](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) wrapper",null,null],[3,"Hint","","[snd_device_name_get_hint](http://www.alsa-project.org/alsa-doc/alsa-lib/group___control.html) wrapper",null,null],[12,"name","","",22,null],[12,"desc","","",22,null],[12,"direction","","",22,null],[11,"drop","","",23,{"inputs":[{"name":"hintiter"}],"output":null}],[11,"new","","typical interfaces are: \"pcm\", \"ctl\", \"rawmidi\", \"timer\", \"seq\" and \"hwdep\".",23,{"inputs":[{"name":"hintiter"},{"name":"option"},{"name":"cstr"}],"output":{"name":"result"}}],[11,"next","","",23,{"inputs":[{"name":"hintiter"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"hint"}],"output":{"name":"hint"}}],[11,"fmt","","",22,{"inputs":[{"name":"hint"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"poll","alsa","Tiny poll ffi",null,null],[3,"PollFlags","alsa::poll","",null,null],[3,"PollFd","","",null,null],[5,"poll","","Wrapper around the libc poll call.",null,null],[5,"poll_all","","Builds a pollfd array, polls it, and returns the poll descriptors which have non-zero revents.",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[8,"PollDescriptors","","",null,null],[10,"count","","",24,{"inputs":[{"name":"polldescriptors"}],"output":{"name":"usize"}}],[10,"fill","","",24,null],[10,"revents","","",24,null],[11,"get","","Wrapper around count and fill - returns an array of PollFds",24,{"inputs":[{"name":"polldescriptors"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"cmp","","",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"pollflags"}],"output":{"name":"pollflags"}}],[11,"eq","","",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"pollflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[{"name":"pollflags"}],"output":{"name":"pollflags"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[{"name":"pollflags"}],"output":{"name":"pollflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"pollflags"}],"output":{"name":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"pollflags"},{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",25,{"inputs":[{"name":"pollflags"},{"name":"c_short"}],"output":{"name":"pollflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"pollflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"pollflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"pollflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"pollflags"},{"name":"pollflags"}],"output":{"name":"pollflags"}}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"pollflags"}],"output":{"name":"pollflags"}}],[11,"from_iter","","",25,{"inputs":[{"name":"pollflags"},{"name":"t"}],"output":{"name":"pollflags"}}],[11,"fmt","","",26,{"inputs":[{"name":"pollfd"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"as_raw_fd","","",26,{"inputs":[{"name":"pollfd"}],"output":{"name":"rawfd"}}],[11,"new","","",26,{"inputs":[{"name":"pollfd"},{"name":"rawfd"},{"name":"pollflags"}],"output":{"name":"pollfd"}}],[11,"get_events","","",26,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollflags"}}],[11,"set_events","","",26,{"inputs":[{"name":"pollfd"},{"name":"pollflags"}],"output":null}],[11,"get_revents","","",26,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollflags"}}],[11,"count","","",26,{"inputs":[{"name":"pollfd"}],"output":{"name":"usize"}}],[11,"fill","","",26,null],[11,"revents","","",26,null],[11,"drop","alsa","",27,{"inputs":[{"name":"output"}],"output":null}],[11,"buffer_open","","",27,{"inputs":[{"name":"output"}],"output":{"name":"result"}}],[11,"buffer_string","","",27,{"inputs":[{"name":"output"},{"name":"f"}],"output":{"name":"t"}}],[11,"fmt","","",27,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","",null,null],[11,"cmp","","",0,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"fmt","","",0,{"inputs":[{"name":"direction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"input","","",0,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"output","","",0,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"cmp","","",1,{"inputs":[{"name":"valueor"},{"name":"valueor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"valueor"},{"name":"valueor"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"valueor"},{"name":"valueor"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"valueor"},{"name":"valueor"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"valueor"},{"name":"valueor"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"valueor"},{"name":"valueor"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"valueor"},{"name":"valueor"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"valueor"},{"name":"valueor"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"valueor"}],"output":{"name":"valueor"}}],[11,"fmt","","",1,{"inputs":[{"name":"valueor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","alsa::ctl","Open does not support async mode (it's not very Rustic anyway)",28,{"inputs":[{"name":"ctl"},{"name":"cstr"},{"name":"bool"}],"output":{"name":"result"}}],[11,"from_card","","",28,{"inputs":[{"name":"ctl"},{"name":"card"},{"name":"bool"}],"output":{"name":"result"}}],[11,"card_info","","",28,{"inputs":[{"name":"ctl"}],"output":{"name":"result"}}],[11,"drop","","",28,{"inputs":[{"name":"ctl"}],"output":null}],[11,"drop","","",29,{"inputs":[{"name":"cardinfo"}],"output":null}],[11,"get_id","","",29,{"inputs":[{"name":"cardinfo"}],"output":{"name":"result"}}],[11,"get_driver","","",29,{"inputs":[{"name":"cardinfo"}],"output":{"name":"result"}}],[11,"get_components","","",29,{"inputs":[{"name":"cardinfo"}],"output":{"name":"result"}}],[11,"get_longname","","",29,{"inputs":[{"name":"cardinfo"}],"output":{"name":"result"}}],[11,"get_name","","",29,{"inputs":[{"name":"cardinfo"}],"output":{"name":"result"}}],[11,"get_mixername","","",29,{"inputs":[{"name":"cardinfo"}],"output":{"name":"result"}}],[11,"get_card","","",29,{"inputs":[{"name":"cardinfo"}],"output":{"name":"card"}}],[11,"cmp","","",5,{"inputs":[{"name":"elemiface"},{"name":"elemiface"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"elemiface"},{"name":"elemiface"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"elemiface"},{"name":"elemiface"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"elemiface"},{"name":"elemiface"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"elemiface"},{"name":"elemiface"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"elemiface"},{"name":"elemiface"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"elemiface"},{"name":"elemiface"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"elemiface"},{"name":"elemiface"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"elemiface"}],"output":{"name":"elemiface"}}],[11,"fmt","","",5,{"inputs":[{"name":"elemiface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",6,{"inputs":[{"name":"elemtype"},{"name":"elemtype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"elemtype"},{"name":"elemtype"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"elemtype"},{"name":"elemtype"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"elemtype"},{"name":"elemtype"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"elemtype"},{"name":"elemtype"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"elemtype"},{"name":"elemtype"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"elemtype"},{"name":"elemtype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"elemtype"},{"name":"elemtype"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"elemtype"}],"output":{"name":"elemtype"}}],[11,"fmt","","",6,{"inputs":[{"name":"elemtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",30,{"inputs":[{"name":"elemvalue"}],"output":null}],[11,"get_boolean","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"}],"output":{"name":"option"}}],[11,"set_boolean","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"},{"name":"bool"}],"output":{"name":"option"}}],[11,"get_integer","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"}],"output":{"name":"option"}}],[11,"set_integer","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"},{"name":"i32"}],"output":{"name":"option"}}],[11,"get_integer64","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"}],"output":{"name":"option"}}],[11,"set_integer64","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"},{"name":"i64"}],"output":{"name":"option"}}],[11,"get_enumerated","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"}],"output":{"name":"option"}}],[11,"set_enumerated","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_byte","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"}],"output":{"name":"option"}}],[11,"set_byte","","",30,{"inputs":[{"name":"elemvalue"},{"name":"u32"},{"name":"u8"}],"output":{"name":"option"}}],[11,"get_bytes","","",30,{"inputs":[{"name":"elemvalue"}],"output":{"name":"option"}}],[11,"set_bytes","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"elemvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",31,{"inputs":[{"name":"eleminfo"}],"output":null}],[11,"get_type","","",31,{"inputs":[{"name":"eleminfo"}],"output":{"name":"elemtype"}}],[11,"get_count","","",31,{"inputs":[{"name":"eleminfo"}],"output":{"name":"u32"}}],[11,"get_name","","",32,{"inputs":[{"name":"elemid"}],"output":{"name":"result"}}],[11,"get_device","","",32,{"inputs":[{"name":"elemid"}],"output":{"name":"u32"}}],[11,"get_subdevice","","",32,{"inputs":[{"name":"elemid"}],"output":{"name":"u32"}}],[11,"get_numid","","",32,{"inputs":[{"name":"elemid"}],"output":{"name":"u32"}}],[11,"get_index","","",32,{"inputs":[{"name":"elemid"}],"output":{"name":"u32"}}],[11,"get_interface","","",32,{"inputs":[{"name":"elemid"}],"output":{"name":"elemiface"}}],[11,"fmt","","",32,{"inputs":[{"name":"elemid"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Direction"],[4,"ValueOr"],[3,"Error"],[3,"Iter"],[3,"Card"],[4,"ElemIface"],[4,"ElemType"],[3,"HCtl"],[3,"ElemIter"],[3,"Elem"],[4,"State"],[4,"Format"],[4,"Access"],[3,"PCM"],[3,"IO"],[3,"HwParams"],[3,"SwParams"],[3,"Status"],[3,"Info"],[3,"Iter"],[3,"Rawmidi"],[3,"IO"],[3,"Hint"],[3,"HintIter"],[8,"PollDescriptors"],[3,"PollFlags"],[3,"PollFd"],[3,"Output"],[3,"Ctl"],[3,"CardInfo"],[3,"ElemValue"],[3,"ElemInfo"],[3,"ElemId"]]};
initSearch(searchIndex);
